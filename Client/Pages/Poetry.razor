@page "/poetry"
@using BlazorApp.Shared
@inject HttpClient Http

<h1 class="text-center p-3">Is the worst poetry really the worst?</h1>
<div class="row p-3 m-3">
    <div class="col-sm p-3 rounded shadow mr-3">
        <div class="p-3 rounded shadow mb-3">
            <input @bind="author" placeholder="Author" />
            <input @bind="title" placeholder="Word in Title" />
            <button class="btn btn-primary" @onclick="IncrementCount">Find</button>
        </div>

        @if (poetry == null)
        {
            <h2>Loading...</h2>
        }
        else
        {
            <div>
                <div>
                    <h3>@poetry[pos].Title</h3>
                    <h4>@poetry[pos].Author</h4>
                    <p>
                        @foreach (var line in poetry[pos].lines)
                        {
                            <p class="p-0 m-0">
                                @line
                            </p>
                        }
                    </p>
                    <table class="table">
                        <tr>
                            <th class="mr-3" scope="row">Sentiment</th>
                            <td>@left.Split(";")[0]</td>
                        </tr>
                        <tr>
                            <th class="mr-3" scope="row">KeyWords</th>
                            <td>@left.Split(";")[1]</td>
                        </tr>
                        <tr>
                            <th class="mr-3" scope="row">Usage of different words</th>
                            <td>@left.Split(";")[2]</td>
                        </tr>
                        <tr>
                            <th class="mr-3" scope="row">Usage of alphabet</th>
                            <td>@left.Split(";")[3]</td>
                        </tr>
                    </table>

                </div>
            </div>
        }
    </div>
    <div class="col-sm p-3 rounded shadow">
        <div class="p-3 rounded shadow mb-3">
            <select @bind="number">
                <option>Vogon</option>
                <option>Paula Nancy Millstone Jennings</option>
                <option>Grunthos the Flatulent</option>
            </select>
            <button class="btn btn-primary" @onclick="SelectWorst">Select</button>
        </div>
        @if (rightpoem != "")
        {
            <h4>
                @rightpoem
            </h4>

            @foreach (var line in FictionPoetry[rightpoem].Split("\n"))
            {
                <p class="p-0 m-0">
                    @line
                </p>
            }
            <table class="table">
                <tr>
                    <th class="mr-3" scope="row">Sentiment</th>
                    <td>@right.Split(";")[0]</td>
                </tr>
                <tr>
                    <th class="mr-3" scope="row">KeyWords</th>
                    <td>@right.Split(";")[1]</td>
                </tr>
                <tr>
                    <th class="mr-3" scope="row">Usage of different words</th>
                    <td>@right.Split(";")[2]</td>
                </tr>
                <tr>
                    <th class="mr-3" scope="row">Usage of alphabet</th>
                    <td>@right.Split(";")[3]</td>
                </tr>
            </table>
        }
    </div>
</div>
@if (rightpoem != "" && poetry != null)
{
    <div class="container rounded shadow p-0">
        <h2 class="text-center">Comparison summary</h2>
        <div class="row">
            <p class="col-sm text-right">@left.Split(";")[0]</p>
            <h3 class="col-sm text-center">Sentiment</h3>
            <p class="col-sm text-left">@right.Split(";")[0]</p>
        </div>
        <div class="row">
            <p class="col-sm text-right">@left.Split(";")[1]</p>
            <h3 class="col-sm text-center">Key Words</h3>
            <p class="col-sm text-left">@right.Split(";")[1]</p>
        </div>
        <div class="row">
            <p class="col-sm text-right">@left.Split(";")[2]</p>
            <h3 class="col-sm text-center">Usage of different words</h3>
            <p class="col-sm text-left">@right.Split(";")[2]</p>
        </div>
        <div class="row">
            <p class="col-sm text-right">@left.Split(";")[3]</p>
            <h3 class="col-sm text-center">Usage of alpha</h3>
            <p class="col-sm text-left">@right.Split(";")[3]</p>
        </div>
    </div>
}
else
{
    <div class="container rounded shadow m-3 p-0">
        <h2 class="text-center">Comparison summary</h2>
        <h1 class="text-center">Select for comparison </h1>
    </div>
}


@code
{
    Random rn = new Random();
    private Poet[] poetry;
    private int pos;
    private string author;
    private string title;
    private string number = "Vogon";
    private string output = "";
    private string left = "";
    private string right = "";
    private string rightpoem = "";

    private Dictionary<string, string> FictionPoetry;

    private async Task TextAnalysis()
    {
        Console.WriteLine(number);
        right = await Http.GetStringAsync($"/api/PoetResult?text={FictionPoetry[number].Replace("\n"," ")}");
        Console.WriteLine(number);
    }

    private async Task IncrementCount()
    {
        string Url = $"https://poetrydb.org/author,title/{author};{title}";
        try
        {
            poetry = await Http.GetFromJsonAsync<Poet[]>(Url);
            Console.WriteLine("done");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        pos = rn.Next(poetry.Length);
    }

    private async Task SelectWorst()
    {
        right = await Http.GetStringAsync($"/api/PoetResult?text={FictionPoetry[number].Replace("\n", " ")}");
        rightpoem = number;
    }

    protected override async Task OnInitializedAsync()
    {
        FictionPoetry = new Dictionary<string, string>();
        FictionPoetry.Add("Vogon", "Oh freddled gruntbuggly,\nThy micturations are to me,\nAs plurdled gabbleblotchits, in midsummer morning\nOn a lurgid bee,\nThat mordiously hath blurted out,\nIts earted jurtles, grumbling\nInto a rancid festering confectious organ squealer.\nNow the jurpling slayjid agrocrustles,\nAre slurping hagrilly up the axlegrurts,\nAnd living glupules frart and stipulate,\nLike jowling meated liverslime,\nGroop, I implore thee, my foonting turlingdromes,\nAnd hooptiously drangle me,\nWith crinkly bindlewurdles,mashurbitries.\nOr else I shall rend thee in the gobberwarts with my blurglecruncheon,\nSee if I don't!\n");
        FictionPoetry.Add("Paula Nancy Millstone Jennings", "The dead swans lay in the stagnant pool.\nThey lay.They rotted.They turned\nAround occasionally.\nBits of flesh dropped off them from\nTime to time.:And sank into the pool's mire.\nThey also smelt a great deal.");
        FictionPoetry.Add("Grunthos the Flatulent", "Relax mind.\nRelax body.\nRelax bowels.\nRelax.\nDo not fall over.\nYou are a cloud.\nYou are raining.\nDo not rain.\nWhile train.\nIs standing at a station.\nMove with the wind.\nApologise where necessary.");
        try
        {
            poetry = await Http.GetFromJsonAsync<Poet[]>("https://poetrydb.org/author,title/Shakespeare;Sonnet");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        pos = rn.Next(poetry.Length);
        output = "";
        string helper = $"/api/PoetResult?text={String.Join('\n',poetry[pos].lines).Replace("\n"," ")}";
        left = await Http.GetStringAsync(helper);
        right = await Http.GetStringAsync($"/api/PoetResult?text={FictionPoetry[number].Replace("\n", " ")}");
    }
}
